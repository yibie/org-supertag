[[./README_CN.org][Chinese Version]]

* TL;DR
Org-supertag is a note-taking tool, an alternative to org-roam, based on org-mode but with a database for speed and query capabilities and support for inline #tags, views...and more.
* Introduction

org-supertag is a package that enhances the tag functionality of org-mode. It allows tags not only to set properties for nodes, but also to directly operate on nodes, and can automatically execute certain behaviors based on time, providing a more flexible way to manage information.

org-supertag brings a more modern note-taking experience to org-mode, such as support for #inline-tag and a behavior system that can automatically trigger and execute certain tasks...

org-supertag adopts a non-intrusive design, harmoniously coexisting with the original functions of org-mode, while providing more possibilities.

* Basic Usage of org-supertag
** Step 1: Basic Installation

#+begin_src emacs-lisp
(use-package org-supertag
  :straight (:host github :repo "yibie/org-supertag")
  :after org
  :config
  (org-supertag-setup))

(setq org-supertag-sync-directories '("~/Documents/notes/")) ;; Configure sync folders
#+end_src

*org-supertag requires some Python dependencies, including `torch`, `epc`, and `ollama`, to drive the RAG and LLM services:*

- Use the automated script to install dependencies
  
#+begin_src 
cd /path/to/org-supertag/simtag

sh ./setup.sh
#+end_src


** Step 2: Briefly Understand What Node and Field Are
A Node is org-supertag's transformation of an org-headline:
- Adds an ID
- Records it to the database

A Node includes the title and content, which is equivalent to a note block in other note-taking apps.

In this documentation, Node is collectively referred to as a "note".
** Step 2: Enter Your First Note

Using org-supertag to take notes is now very simple:

1. As before, use * to enter an org-headline
2. Enter a #, and an auto-complete tag candidate bar will appear,
   - Use C-n/p to move up and down to highlight tags, then press RET to add the tag
   - If you enter a new tag, just press RET to add and create the tag

üéâCongratulations, you have now successfully created a note with org-supertag, and this note has been recorded in the database and converted into a Node.

Note: In org-supertag, when you add a tag, it will automatically add an ID to its org-headline and record it in the database.

In short, using org-supertag to add a tag to an org-headline will automatically convert it into a Node.

** Step 3: Open Node View to See Node Details

Place the cursor on the same line as the Node's org-headline, then run ~M-x org-supertag-view-node~ to bring up the Node View interface.

This interface is divided into several sections:
- Metadata area
  - Shows the tags added to the Node
  - You can directly set Field and Field Value for specific tags
- Backlink area
  - Shows references to and from the Node
  - Divided into Ref from and Ref to sections
  - Shows the specific content of both referencing and referenced Nodes
  - The displayed content includes the Node's title and content
- Co-occurrence relationships
  - Shows tags that have co-occurrence relationships with the tags in the tag area
    
** Step 4: Set Field and Field Value

org-supertag provides two ways to set Field and Field Value:

- Set individually
  - In Node View, move the cursor to the Metadata area and follow the operation prompts.

- Batch setting
  - Enter the Table view with ~M-x org-supertag-view-table~.
  - As in Node View, you can edit Fields (add, delete, modify) and set Field Values.
  - Cell navigation is the same as org-table.

** Step 5: Find Your Notes

org-supertag provides two ways to find notes: 

~M-x org-supertag-node-find~
- Directly displays a candidate bar in the minibuffer
- Press RET on the selected note to jump directly to its specific location

~M-x org-supertag-query~
- Enter the keywords you want to search for in the minibuffer
  - org-supertag will record the keywords you have used for easy reuse
  - Supports searching with multiple keywords, separated by spaces
- The search scope of ~org-supertag-query~:
  - org-headlines, tags, and field values

*** S-expression Query Engine
org-supertag now supports powerful S-expression queries through Org Babel blocks, providing advanced filtering and dynamic table output.

**** Basic Usage
Create a source block with the language `org-supertag-query`:

#+begin_src org-supertag-query :results raw
(tag "project")
#+end_src

**** Query Operators
- **Tag queries**: `(tag "TAG_NAME")` - Find nodes with specific tags
- **Field queries**: `(field "FIELD_NAME" "VALUE")` - Find nodes with specific field values
- **Logical operators**: 
  - `(and QUERY1 QUERY2)` - Both conditions must be true
  - `(or QUERY1 QUERY2)` - Either condition can be true  
  - `(not QUERY)` - Exclude nodes matching the query
- **Time-based queries**:
  - `(after "DATE")` - Nodes created after the specified date
  - `(before "DATE")` - Nodes created before the specified date
  - `(between "START_DATE" "END_DATE")` - Nodes created between two dates
  - Date formats support absolute dates ("2024-01-01") and relative dates ("-7d", "+1m", "now")

**** Dynamic Table Output
Query results are displayed as dynamic Org tables:
- First column: Clickable node links (Node Title)
- Second column: Associated tags
- Additional columns: Dynamically added for fields specified in the query

**** Interactive Query Block Insertion
Use `M-x org-supertag-insert-query-block` to quickly insert a pre-formatted query block at point.

**** Example Queries
#+begin_src org-supertag-query :results raw
;; Find all project nodes with "On-going" status
(and (tag "project") (field "Status" "On-going"))

;; Find nodes created in the last 7 days
(after "-7d")

;; Find nodes with "project" tag but not "Canceled" status
(and (tag "project") (not (field "Status" "Canceled")))
#+end_src

** Step 6: Move Your Notes
~M-x org-supertag-node-move~
- First, select the target file in the minibuffer
- Then select the position to move the note to
- Press RET to confirm

~org-supertag-node-move~ can move multiple notes in batch; just highlight multiple notes and execute the command.

** Step 7: Chat with Your Knowledge Base
~M-x org-supertag-view-chat-open~

- After launching the chat interface, directly enter keywords, and the LLM will reply based on the information returned by RAG
- The default conversation is equivalent to a RAG retrieval result
  - Expanding Context shows the results returned by RAG
- Enter /commands to see what commands are available
  - Enter a command directly to enter the corresponding chat mode
- Enter /define to customize chat modes
  - Syntax: ~/define <command-name> "prompt"~

* Advanced Usage of org-supertag
** Multiple Views, Multiple Usages
*** Discovery View
~M-x org-supertag-view-discover~

- Provides a tag-based discovery mechanism, giving a sense of exploration when browsing the knowledge base
- Multiple tags can be added as filter conditions
- Filter conditions can be dynamically added or removed

[[./picture/figure13.gif]]

*** Kanban View
~M-x org-supertag-view-kanban~

- Automatically generates a multi-column view based on a tag's Field and Field Value, similar to Trello
- Notes are presented as cards
- Move cards: you can press h/l on the card to move it left/right, or RET to modify the corresponding Field Value

‚ö†Ô∏è Currently, only one Field in a tag can be used to generate columns
‚ö†Ô∏è Since the borders are generated by characters, if there are too many columns and they exceed the width of the current Emacs window, the style will be broken. I don't know how to solve this problem yet. If anyone has experience, please teach me, thank you üôè.

*** Table View
As mentioned above, not repeated here.
*** Column View
~M-x org-supertag-view-column~

- Compare nodes under different tag combinations at the same time, intuitively analyze differences
- Dynamically add or remove comparison columns to meet diverse needs
- Support adding additional tags to columns to deepen the comparison dimension
- Full keyboard support

[[./picture/figure15.gif]]

** Advanced Query Capabilities

org-supertag provides powerful query capabilities that go beyond simple keyword search, enabling complex data filtering and analysis.

*** S-expression Query Engine
The S-expression query engine allows you to create complex queries using a Lisp-like syntax:

**** Complex Query Examples
#+begin_src org-supertag-query :results raw
;; Find all urgent projects that are not completed
(and (tag "project") 
     (field "Priority" "High") 
     (not (field "Status" "Completed")))

;; Find nodes created in the last month with specific tags
(and (after "-1m") 
     (or (tag "research") (tag "development")))

;; Find nodes with multiple field conditions
(and (field "Department" "Engineering")
     (field "Status" "Active")
     (before "2024-12-31"))
#+end_src

**** Enhanced Interactive Query Context
The interactive query interface now provides more intelligent context snippets:
- When keywords match field names or values, the context displays `Field [FIELD_NAME]: FIELD_VALUE`
- This prioritizes relevant field information over general content snippets
- Makes it easier to understand why a node matched your search criteria

*** Query History and Reusability
- Query history is automatically saved and can be reused
- Frequently used queries are prioritized in the history
- Supports both keyword-based and S-expression queries in the same interface

** Use the Behavior System to Form Automated Workflows

By integrating multiple operations into one tag, *achieve one-click completion of complex operations* and improve work efficiency.

[[./picture/figure6.gif]]

~M-x org-supertag-behavior-attach~ Add behavior to the current tag

~M-x org-supertag-behavior-detach~ Detach behavior from the current tag

- Tag triggers preset actions, achieving automation
The behavior system makes tags "smart", *automatically triggering preset actions when adding/removing tags* (such as changing styles, setting status, etc.).

- Behaviors can be scheduled, combined, and parameterized
Behaviors can be scheduled, used in combination, and with parameters, *making Org-mode workflows more automated and efficient*.

- Built-in behavior library and custom support
Built-in behavior library allows users to use predefined common behaviors, and also create custom behaviors. *The modular design makes it easy to share, reuse, and extend behaviors between different Org files or users*.

*** Advanced Usage of the Behavior System

Create custom behaviors by editing the ~/.emacs.d/org-supertag/org-supertag-custom-behavior.el file:

Here is an example

#+begin_src emacs-lisp
;; Register a behavior named "@urgent"
;; Parameter description:
;;   - @urgent: The name of the behavior, used to identify and reference this behavior
;;   - :trigger: Trigger condition, :on-add means trigger when adding a tag
;;   - :list: List of actions to be executed, each action is a command string
;;   - :style: Tag display style, including font and prefix icon settings
(org-supertag-behavior-register "@urgent"                 ;; Register a behavior named "@urgent"
  :trigger :on-add                                        ;; Trigger when adding a tag
  :list '("@todo=TODO"                                    ;; Set the TODO status
         "@priority=A"                                    ;; Set the priority to A
         "@deadline=today")                               ;; Set the deadline to today
  :style '(:face (:foreground "red" :weight bold)         ;; Set the tag to display in red and bold
          :prefix "üî•"))                                  ;; Display a flame icon in front of the tag
#+end_src

For more usage, please refer to [[https://github.com/yibie/org-supertag/wiki/Advance-Usage-%E2%80%90-Behavior-System-Guide][Org‚Äêsupertag Advance Usage]]

* In-depth Understanding of org-supertag

* FAQ
** Database Recovery - What to Do When Problems Occur?

If you encounter org-supertag database problems (missing tags, lost relationships, or data corruption), org-supertag provides a complete recovery suite.

*** Quick Recovery

#+begin_src emacs-lisp
;; Load the recovery tool
M-x load-file RET org-supertag-recovery.el RET

;; Start recovery
M-x org-supertag-recovery-full-suite
#+end_src

*** Recovery Options

The recovery suite provides 9 different recovery options:

1. **Diagnose database status** - Analyze the current database state
2. **Restore from backup** - Automatically find and restore from the latest backup
3. **Rebuild entire database** - Rescan all org files from scratch
4. **Rebuild tag definitions from nodes** - Recover lost tag definitions
5. **Recover field definitions from links** - Rebuild field structures
6. **Recover tag relationships from metadata** - Restore tag associations
7. **Execute full recovery workflow** - Complete step-by-step recovery
8. **View recovery status** - Monitor recovery progress
9. **Exit** - Exit the recovery suite

*** Common Recovery Scenarios

**** Scenario 1: All tags lost
#+begin_src
Symptom: org-supertag-tag-add-tag cannot complete tags
Solution: Choose option 4 "Rebuild tag definitions from nodes"
#+end_src

**** Scenario 2: Field definitions lost
#+begin_src
Symptom: Tags exist but field definitions are empty
Solution: Choose option 5 "Recover field definitions from links"
#+end_src

**** Scenario 3: Tag relationships lost
#+begin_src
Symptom: Tags exist but no co-occurrence relationships
Solution: Choose option 6 "Recover tag relationships from metadata"
#+end_src

**** Scenario 4: Complete database corruption
#+begin_src
Symptom: Database cannot load or is empty
Solution: Choose option 2 "Restore from backup" or option 3 "Rebuild entire database"
#+end_src

*** Recovery Features

- **üîç Smart Diagnosis**: Automatically analyzes database state and provides suggestions
- **üìä Progress Tracking**: Detailed recovery status and progress monitoring
- **üîÑ Safe Operations**: Automatic backup before recovery operations
- **‚ö° Incremental Recovery**: Support for single-item recovery and complete reconstruction
- **üõ°Ô∏è Error Handling**: Comprehensive error handling and rollback mechanisms

*** Technical Details

The recovery tool can extract data from multiple sources:
- **Node data**: Tag references in `:tags` properties
- **Link data**: Field links with `:node-field:` prefix
- **Metadata**: `tag-cooccur:` and `tag-pmi:` key-value pairs
- **Backup files**: Automatic backup file detection and restoration

For more detailed information, please refer to the included `RECOVERY_GUIDE.md`.

** What is a Node? What is a Field? Why distinguish them from org-headline and org-properties?

** Why set "co-occurrence relationships" for tags?
When a tag and another tag are applied to the same Node, there is a relationship between them called "co-occurrence".

The "co-occurrence" relationship is the most basic among all tag relationships. But what is its use?

1. In the "tag discovery view", you can filter layer by layer through co-occurrence tags
2. When managing "tag relationships", you can quickly find tags that have relationships behind them through "co-occurrence relationships"
3. ......

I think "co-occurrence" is the most wonderful phenomenon in the world. This allows us to automatically obtain meaningful connections when adding tags.

Here is the "tag co-occurrence mechanism" in org-supertag:

- In the same node, if both A and B tags are added, these two tags have a "co-occurrence relationship"
- In parent-child nodes, if the parent and child nodes are respectively tagged with A and B, from org-supertag's perspective, these two tags also have a "co-occurrence relationship"

I think this is a clever design, as it avoids repeatedly adding the same tag to nodes in the same node tree. I've tried it, it's quite tiring!

In org-supertag, the co-occurrence relationship of tags is reflected in the "views". In the README, we have already introduced several views, among which ~org-supertag-view-discover~ can use tags with "co-occurrence relationships" as filter conditions to filter nodes.


* Changelog
For details, see [[./CHANGELOG.org][CHANGELOG]]

- 2025-07-29 4.3.0 released
- 2025-07-27 4.2.0 released
- 2025-07-21 4.0.0 released
- 2025-05-24 3.0.2 released
- 2025-04-05 3.0.0 released
- 2025-01-13 2.0.0 released
- 2024-12-31 1.0.0 released
- 2024-12-20 0.0.2 released
- 2024-12-19 0.0.1 released

* Acknowledgments

org-supertag is deeply influenced by Tana, especially its core concept of "treating nodes as the operation objects of tags", which brings a lot of inspiration.

org-supertag is also deeply influenced by ekg and org-node:
- [[https://github.com/ahyatt/ekg/commits/develop/][ekg]] is the first note-taking tool in my eyes that is centered on tags. I once used it to record many days of diaries
- [[https://github.com/meedstrom/org-node][org-node]] deeply influenced the basic working mechanism of org-supertag with its parsing of org-mode files and the application of hash tables

* Contribution

Contributions are welcome! Please see [[file:.github/CONTRIBUTING.org][Contribution Guide]].
