# Feature Plan: Grid View (表格写作法视图)

## 1. 概述 (Overview)

根据用户建议，计划新增一个名为 "Grid View" 的视图，以支持“表格写作法”模式的头脑风暴和内容创作。该视图将以表格/网格形式展示 `org-supertag` 的节点，其中：

-   **行 (Rows)** 代表不同的节点 (Nodes)。
-   **列 (Columns)** 代表用户选择的字段 (Fields)。
-   **单元格 (Cells)** 显示特定节点在特定字段上的值，并支持多行文本显示和直接编辑。

此功能将作为对看板视图 (`kanban-view`) 的补充，专注于跨多个字段的内容组织，而非基于单个字段值的状态分组。

## 2. 技术方案 (Technical Plan)

### a. 创建新文件

-   **文件**: `org-supertag-view-grid.el`
-   **目的**: 为了保持代码模块化，新视图的逻辑将完全包含在这个新文件中，避免与 `org-supertag-view-kanban.el` 或其他视图文件耦合。

### b. 核心数据逻辑

-   **入口函数**: `org-supertag-view-grid` (interactive command).
-   **用户输入**:
    1.  提示用户选择一个**基础标签** (Base Tag)，例如 `novel-scene` 或 `research-paper`。
    2.  提示用户从该标签的可用字段中，选择**一个或多个字段**作为表格的列。
-   **数据获取**:
    -   获取所有带有该基础标签的节点。
    -   为每个节点，提取所选字段的值。

### c. 渲染逻辑

-   **布局**: 创建一个动态的、基于文本的网格布局。
-   **单元格渲染**:
    -   每个单元格的内容是对应节点字段的值。
    -   **关键特性**: 实现单元格内文本的自动换行 (`word-wrapping`)，以确保长文本可以完整显示。
    -   计算每列的最大宽度，并进行对齐，以保证表格整洁。
-   **空值处理**: 如果某个节点在特定字段上没有值，单元格将显示为空。

### d. 交互功能

-   **单元格编辑 (核心)**:
    -   用户可以通过快捷键 (e.g., `RET`) 直接在光标所在的单元格中编辑内容。
    -   编辑后，系统将自动调用 `org-supertag-field-set-value` 更新底层数据。
    -   视图将自动刷新以显示最新内容。
-   **导航**:
    -   使用标准 Emacs 导航键 (`h/j/k/l` 或方向键) 在单元格之间快速移动。
-   **其他操作**:
    -   `g`: 刷新视图。
    -   `q`: 退出视图。
    -   `v`: 跳转到当前行对应节点的源文件位置。

## 3. 文件整合

-   将 `org-supertag-view-grid.el` 添加到 `org-supertag.el` 的 `require` 列表中。
-   为 `org-supertag-view-grid` 函数添加 `;;;###autoload` 注释，使其能被 Emacs 正确加载。

---

# Feature Plan: Field Extension (字段继承)

## 1. 概述 (Overview)

新增字段继承功能，允许一个标签 (Tag) 从另一个父标签处“继承”其所有字段定义。例如，可以定义 `#college` 标签继承自 `#person` 标签。如此一来，所有被标记为 `#college` 的节点，将自动拥有 `#person` 中定义的字段（如 `Email`, `Company`），以及 `#college` 自身定义的字段（如 `Major`）。

此功能旨在提高字段定义的复用性，增强知识库的结构化能力，并减少重复定义。

## 2. 技术方案 (Technical Plan)

### a. 设计模型：动态计算 (软链接模型)

我们将采用**动态计算**模型，而非持久化模型。这意味着我们只在数据库中存储继承关系，而不是复制字段定义。

-   **核心思想**: 子标签通过一个类似“软链接”的指针 (`:extends`) 指向父标签。当需要获取子标签的完整字段列表时，系统会实时地、递归地向上查找，合并所有父系的字段和自身的字段。
-   **选择理由**:
    -   **强数据一致性**: 父标签的字段定义是“单一数据源”。修改父标签，所有子孙标签自动、即时、安全地反映此变更，杜绝了连锁更新失败导致的数据不一致风险。
    -   **无数据冗余**: 字段定义只存储一次。
    -   **高灵活性**: 修改或解除继承关系成本极低。
    -   **性能**: 计算结果将被缓存在内存中，避免重复计算，确保高性能。

### b. 数据库模式变更 (`org-supertag-db.el`)

-   在 `org-supertag-db-object-structure` 中，为 `:tag` 类型实体的 `:optional` 属性列表增加一个新的键：
    -   `:extends`：用于存储其父标签的 ID (字符串)。
-   此变更将是实现继承关系的唯一数据库结构变更。

### c. 核心逻辑实现 (`org-supertag-field.el` 或 `org-supertag-tag.el`)

-   **创建核心函数**: `org-supertag-get-all-fields-for-tag(tag-id)`
    -   此函数将作为全系统中获取标签字段的唯一入口。
    -   **功能**:
        1.  检查并返回内存缓存。
        2.  若无缓存，获取 `tag-id` 自身的 `:fields`。
        3.  检查 `:extends` 属性，若存在，则递归调用自身以获取父标签的完整字段列表。
        4.  **合并与覆盖**: 将父字段列表与自身字段列表合并。若存在同名字段，子标签的定义将**覆盖**父标签的定义。
        5.  将最终的完整字段列表存入缓存并返回。

### d. 现有代码集成

-   对整个代码库进行审查，将所有直接读取标签 `:fields` 属性的地方，全部替换为对新的 `org-supertag-get-all-fields-for-tag` 函数的调用。
-   **重点改造区域**:
    -   字段补全系统 (`org-supertag-completion.el`)。
    -   所有涉及字段编辑的用户界面。
    -   所有以表格、列表等形式展示节点字段的视图 (`org-supertag-view-table.el`, `org-supertag-view-grid.el` 等)。

### e. 用户接口 (UI)

-   创建一个新的交互式命令，例如 `org-supertag-tag-set-extends`。
-   **功能**:
    1.  提示用户选择一个要修改的标签。
    2.  提示用户选择一个父标签（可以为空，表示解除继承）。
    3.  在设置继承关系时，必须进行**循环依赖检测**，防止出现 A->B, B->A 这样的死循环。
    4.  更新标签定义后，清空相关的字段缓存。