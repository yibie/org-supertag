;;; org-supertag-bridge-test.el --- Tests for org-supertag-bridge -*- lexical-binding: t; -*-

;;; Commentary:
;; This file contains tests for the org-supertag EPC bridge.
;;
;; Prerequisites:
;; 1. Ensure `org-supertag-bridge.el` and `org-supertag-bridge-epc.el` are in your Emacs `load-path`.
;;    If they are in the project root, you can add to your init.el or at the top of this file:
;;    (add-to-list 'load-path (expand-file-name "." (file-name-directory (or load-file-name buffer-file-name))))
;;
;; 2. Customize `org-supertag-bridge-python-script` if `simtag_bridge.py`'s location
;;    differs from the default expected by `org-supertag-bridge.el` or this test file's override.
;;    This file assumes `simtag_bridge.py` is in "simtag/" subdirectory relative to this file.
;;
;; 3. Ensure `org-supertag-bridge-data-directory` is set to a writable path.
;;    This file sets it to a temporary directory for testing.
;;
;; 4. IMPORTANT: Apply the suggested correction to `org-supertag-bridge-call-sync` in
;;    `org-supertag-bridge.el` and fix the prefix for `org-suertag-bridge-deferred-chain`
;;    in `org-supertag-bridge-epc.el` as mentioned in prior communications.
;;
;; How to use:
;; - Load this file: `M-x load-file RET org-supertag-bridge-test.el RET`
;; - Run individual test functions: `M-x ostb-test-ping-bridge RET`
;; - Run the full cycle: `M-x ostb-test-full-cycle RET`
;; - Check `*org-supertag-bridge-log*` and `*simtag-bridge-py-output*` buffers for logs.

;;; Code:

(require 'org-supertag-bridge)

;;;; Configuration (adjust as needed for your environment)

;; Point to the Python interpreter in the project's virtual environment
(setq org-supertag-bridge-python-command "/Users/chenyibin/Documents/emacs/package/org-supertag/.venv/bin/python3")

;; Assuming this test file is in the project root, and simtag_bridge.py is in 'simtag/'
;; This overrides the default in org-supertag-bridge.el for the testing session.
(setq org-supertag-bridge-python-script
      (expand-file-name "simtag/simtag_bridge.py"
                        (file-name-directory (or load-file-name buffer-file-name))))

;; Use a temporary data directory for tests to avoid cluttering the user's default.
(setq org-supertag-bridge-data-directory
      (expand-file-name "test-simtag-data" temporary-file-directory))

;; Enable logging for easier debugging during tests.
(setq org-supertag-bridge-enable-log t)
(setq org-supertag-bridge-epc-debug t) ; Enable EPC level logging for more detail
(setq org-supertag-bridge-deferred-debug t) ; Enable deferred logging

;;;; Helper Functions

(defun ostb-test--ensure-started ()
  "Ensure the bridge is started for testing. Errors if not ready after timeout."
  (unless (and org-supertag-bridge--python-epc-manager
               (org-supertag-bridge-epc-live-p org-supertag-bridge--python-epc-manager)
               org-supertag-bridge--ready-p)
    (message "Bridge not ready, attempting to start (will wait up to 15s)...")
    (unless (org-supertag-bridge-ensure-ready 15) ; Wait up to 15s
      (error "Bridge failed to start or become ready within 15s.")))
  (message "Bridge is confirmed ready."))

;;;; Test Functions

(defun ostb-test-start-bridge ()
  "Test: Start the SimTagBridge and ensure it's ready."
  (interactive)
  (message "Attempting to start and ensure bridge readiness (timeout 15s)...")
  (make-directory org-supertag-bridge-data-directory t) ; Ensure data dir exists
  (if (org-supertag-bridge-ensure-ready 15)
      (message "SimTagBridge started successfully and is ready.")
    (error "SimTagBridge failed to start or become ready within 15s timeout.")))

(defun ostb-test-ping-bridge ()
  "Test: Ping the Python server. Expects 'pong'."
  (interactive)
  (ostb-test--ensure-started)
  (message "Pinging Python server...")
  (let ((response (org-supertag-bridge-call-sync "ping" nil 5)))
    (if (equal response "pong")
        (message "Ping response: %S (Success)" response)
      (error "Ping test failed. Expected 'pong', got: %S" response))))

(defun ostb-test-echo-bridge (message-to-echo)
  "Test: Echo a MESSAGE-TO-ECHO via the Python server."
  (interactive "sEcho message (e.g., Hello Elisp!): ")
  (ostb-test--ensure-started)
  (message "Sending echo request with message: '%s'..." message-to-echo)
  (let ((response (org-supertag-bridge-call-sync "echo" message-to-echo 5)))
    (if (string-match-p (regexp-quote message-to-echo) response)
        (message "Echo response: %S (Success)" response)
      (error "Echo test failed. Expected response to contain '%s', got: %S" message-to-echo response))))

(defun ostb-test-get-status-bridge ()
  "Test: Get status from the Python server."
  (interactive)
  (ostb-test--ensure-started)
  (message "Requesting status from Python server...")
  (let ((response (org-supertag-bridge-call-sync "get_status" nil 10)))
    (message "Get_status raw response: %S" response)
    (if (and (consp response) (equal (plist-get response :status) "success"))
        (progn
          (message "Get_status successful. Full status:")
          (pp response) ; Pretty print the status
          response)
      (error "Get_status test failed. Response format incorrect or status not success: %S" response))))

(defun ostb-test-stop-bridge ()
  "Test: Stop the SimTagBridge Python process and clean up EPC."
  (interactive)
  (message "Attempting to stop SimTagBridge process and EPC connections...")
  (org-supertag-bridge-kill-process)
  (message "SimTagBridge kill process initiated. Check logs for confirmation."))

(defun ostb-test-full-cycle ()
  "Test: Run a full cycle: start, ping, echo, get_status, stop."
  (interactive)
  (message "Starting full test cycle for SimTagBridge...")
  (condition-case-unless-debug err
      (progn
        (ostb-test-start-bridge)
        (sit-for 1) ; Give a moment for Python server to fully initialize and report ready.
        (ostb-test-ping-bridge)
        (sit-for 0.5)
        (ostb-test-echo-bridge "Hello from full cycle test!")
        (sit-for 0.5)
        (ostb-test-get-status-bridge)
        (message "Full test cycle (start, ping, echo, get_status) completed successfully."))
    (error
     (message "Error during test cycle: %s" (error-message-string err))
     (error "Test cycle failed: %s" (error-message-string err))))
  
  (message "Now stopping the bridge as part of the full cycle...")
  (ostb-test-stop-bridge)
  (message "Full test cycle completed (stop initiated). Check logs for details."))

(provide 'org-supertag-bridge-test)
;;; org-supertag-bridge-test.el ends here 
